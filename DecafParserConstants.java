/* Generated By:JJTree&JavaCC: Do not edit this line. DecafParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface DecafParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int BOOLEAN = 7;
  /** RegularExpression Id. */
  int BREAK = 8;
  /** RegularExpression Id. */
  int CALLOUT = 9;
  /** RegularExpression Id. */
  int CLASS = 10;
  /** RegularExpression Id. */
  int CONTINUE = 11;
  /** RegularExpression Id. */
  int ELSE = 12;
  /** RegularExpression Id. */
  int EXTENDS = 13;
  /** RegularExpression Id. */
  int FALSE = 14;
  /** RegularExpression Id. */
  int FOR = 15;
  /** RegularExpression Id. */
  int IF = 16;
  /** RegularExpression Id. */
  int INT = 17;
  /** RegularExpression Id. */
  int NEW = 18;
  /** RegularExpression Id. */
  int NULL = 19;
  /** RegularExpression Id. */
  int PROGRAM = 20;
  /** RegularExpression Id. */
  int RETURN = 21;
  /** RegularExpression Id. */
  int THIS = 22;
  /** RegularExpression Id. */
  int TRUE = 23;
  /** RegularExpression Id. */
  int VOID = 24;
  /** RegularExpression Id. */
  int WHILE = 25;
  /** RegularExpression Id. */
  int LPAREN = 26;
  /** RegularExpression Id. */
  int RPAREN = 27;
  /** RegularExpression Id. */
  int LBRACK = 28;
  /** RegularExpression Id. */
  int RBRACK = 29;
  /** RegularExpression Id. */
  int LBRACE = 30;
  /** RegularExpression Id. */
  int RBRACE = 31;
  /** RegularExpression Id. */
  int COMMA = 32;
  /** RegularExpression Id. */
  int SEMICOLON = 33;
  /** RegularExpression Id. */
  int UNARY_OP = 34;
  /** RegularExpression Id. */
  int BIN_OP = 35;
  /** RegularExpression Id. */
  int ARITH_OP = 36;
  /** RegularExpression Id. */
  int REL_OP = 37;
  /** RegularExpression Id. */
  int EQ_OP = 38;
  /** RegularExpression Id. */
  int COND_OP = 39;
  /** RegularExpression Id. */
  int ASSIGN = 40;
  /** RegularExpression Id. */
  int ASSIGN_SC = 41;
  /** RegularExpression Id. */
  int ID = 42;
  /** RegularExpression Id. */
  int HEX_LITERAL = 43;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 44;
  /** RegularExpression Id. */
  int CHAR = 45;
  /** RegularExpression Id. */
  int ALPHA_NUM = 46;
  /** RegularExpression Id. */
  int ALPHA = 47;
  /** RegularExpression Id. */
  int HEX_DIGIT = 48;
  /** RegularExpression Id. */
  int BOOL_LITERAL = 49;
  /** RegularExpression Id. */
  int CHAR_LITERAL = 50;
  /** RegularExpression Id. */
  int STRING_LITERAL = 51;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\f\"",
    "<token of kind 6>",
    "\"boolean\"",
    "\"break\"",
    "\"callout\"",
    "\"class\"",
    "\"continue\"",
    "\"else\"",
    "\"extends\"",
    "\"false\"",
    "\"for\"",
    "\"if\"",
    "\"int\"",
    "\"new\"",
    "\"null\"",
    "\"Program\"",
    "\"return\"",
    "\"this\"",
    "\"true\"",
    "\"void\"",
    "\"while\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\";\"",
    "<UNARY_OP>",
    "<BIN_OP>",
    "<ARITH_OP>",
    "<REL_OP>",
    "<EQ_OP>",
    "<COND_OP>",
    "\"=\"",
    "<ASSIGN_SC>",
    "<ID>",
    "<HEX_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<CHAR>",
    "<ALPHA_NUM>",
    "<ALPHA>",
    "<HEX_DIGIT>",
    "<BOOL_LITERAL>",
    "<CHAR_LITERAL>",
    "<STRING_LITERAL>",
  };

}
