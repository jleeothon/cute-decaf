/* Generated By:JJTree&JavaCC: Do not edit this line. DecafConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface DecafConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int BOOLEAN = 7;
  /** RegularExpression Id. */
  int BREAK = 8;
  /** RegularExpression Id. */
  int CALLOUT = 9;
  /** RegularExpression Id. */
  int CLASS = 10;
  /** RegularExpression Id. */
  int CONTINUE = 11;
  /** RegularExpression Id. */
  int ELSE = 12;
  /** RegularExpression Id. */
  int FOR = 13;
  /** RegularExpression Id. */
  int IF = 14;
  /** RegularExpression Id. */
  int INT = 15;
  /** RegularExpression Id. */
  int PROGRAM = 16;
  /** RegularExpression Id. */
  int RETURN = 17;
  /** RegularExpression Id. */
  int THIS = 18;
  /** RegularExpression Id. */
  int VOID = 19;
  /** RegularExpression Id. */
  int WHILE = 20;
  /** RegularExpression Id. */
  int LPAREN = 21;
  /** RegularExpression Id. */
  int RPAREN = 22;
  /** RegularExpression Id. */
  int LBRACK = 23;
  /** RegularExpression Id. */
  int RBRACK = 24;
  /** RegularExpression Id. */
  int LBRACE = 25;
  /** RegularExpression Id. */
  int RBRACE = 26;
  /** RegularExpression Id. */
  int COMMA = 27;
  /** RegularExpression Id. */
  int SEMICOLON = 28;
  /** RegularExpression Id. */
  int NOT_OP = 29;
  /** RegularExpression Id. */
  int DISJUNCTION_OP = 30;
  /** RegularExpression Id. */
  int CONJUNCTION_OP = 31;
  /** RegularExpression Id. */
  int EQUALITY_OP = 32;
  /** RegularExpression Id. */
  int RELATION_OP = 33;
  /** RegularExpression Id. */
  int FACTOR_OP = 34;
  /** RegularExpression Id. */
  int TERM_OP = 35;
  /** RegularExpression Id. */
  int ASSIGN = 36;
  /** RegularExpression Id. */
  int ASSIGN_SC = 37;
  /** RegularExpression Id. */
  int HEX_LITERAL = 38;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 39;
  /** RegularExpression Id. */
  int CHAR = 40;
  /** RegularExpression Id. */
  int ALPHA_NUM = 41;
  /** RegularExpression Id. */
  int ALPHA = 42;
  /** RegularExpression Id. */
  int HEX_DIGIT = 43;
  /** RegularExpression Id. */
  int BOOL_LITERAL = 44;
  /** RegularExpression Id. */
  int CHAR_LITERAL = 45;
  /** RegularExpression Id. */
  int STRING_LITERAL = 46;
  /** RegularExpression Id. */
  int IDENTIFIER = 47;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\f\"",
    "<token of kind 6>",
    "\"boolean\"",
    "\"break\"",
    "\"callout\"",
    "\"class\"",
    "\"continue\"",
    "\"else\"",
    "\"for\"",
    "\"if\"",
    "\"int\"",
    "\"Program\"",
    "\"return\"",
    "\"this\"",
    "\"void\"",
    "\"while\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\";\"",
    "\"!\"",
    "\"||\"",
    "\"&&\"",
    "<EQUALITY_OP>",
    "<RELATION_OP>",
    "<FACTOR_OP>",
    "<TERM_OP>",
    "\"=\"",
    "<ASSIGN_SC>",
    "<HEX_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<CHAR>",
    "<ALPHA_NUM>",
    "<ALPHA>",
    "<HEX_DIGIT>",
    "<BOOL_LITERAL>",
    "<CHAR_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
  };

}
