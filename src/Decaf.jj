/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Decaf.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
               
                 
  DEBUG_TOKEN_MANAGER = true;
  DEBUG_PARSER = true;
  FORCE_LA_CHECK = true;
                       
                                        
}

PARSER_BEGIN(Decaf)

import java.io.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class Decaf/*@bgen(jjtree)*/implements DecafTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTDecafState jjtree = new JJTDecafState();

/*@egen*/

  static UglySymbolTable currentScope = new UglySymbolTable("Global");
  
  public static void main(String args []) throws ParseException, IOException {
    Decaf parser = null;
    FileInputStream fis = null;
    if (args.length > 0) {
      fis = new FileInputStream(args[0]);
    } else {
      BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
      String line = reader.readLine();
      fis = new FileInputStream(line);
    }
    
    parser = new Decaf(fis);

    try {
      SimpleNode tree = Decaf.Program();
      tree.dump("> ");
      UglySymbolTableVisitor symbolTableVisitor = new UglySymbolTableVisitor();
      UglyTypeCheckVisitor typeCheckVisitor = new UglyTypeCheckVisitor();
      UglyTACVisitor tacVisitor = new UglyTACVisitor();
      tree.jjtAccept(symbolTableVisitor, currentScope);
      tree.jjtAccept(typeCheckVisitor, currentScope);
      if (UglySemanticError.hadErrors()) {
        System.out.println("Semantic errors.");
        return;
      }
      System.out.println("Yay!");
      tree.jjtAccept(tacVisitor, currentScope);
    } catch (Exception e) {
        System.out.println("Oops. Exception.");
        e.printStackTrace();
        System.out.println(e.getMessage());
        Decaf.ReInit(System.in);
      } catch (Error e) {
        System.out.println("Oops. Error.");
        System.out.println("*** error message ***");
        System.out.println(e.getMessage());
        System.out.println("*** error message ***");
        e.printStackTrace();
      }
  }
}
PARSER_END(Decaf)

/*
 * Whitespaces
 */
SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "\f"
}

/*
 * Line comments
 */
SKIP :
{
  <
    "//"
    (
      [
        "a"-"z", "A"-"Z", "0"-"9", "_",
        ".", ",", ";", ":", "!", "?",
        "(", ")", "-", "+", "*", "/", "=", "<", ">",
        " ", "\"", "'"
      ]
    )*
    ("\n" | "\r\n" | "\r")
  >
}

/*
 * Keywords
 */
TOKEN :
{
  < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < CALLOUT: "callout" >
| < CLASS: "class" >
| < CONTINUE: "continue" >
| < ELSE: "else" >
| < FOR: "for" >
| < IF: "if" >
| < INT: "int" >
| < PROGRAM: "Program" >
| < RETURN: "return" >
| < THIS: "this" >
| < VOID: "void" >
| < WHILE: "while" >
}

/*
 * SYNTAX MARKERS
 */
TOKEN:
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACK: "[" >
| < RBRACK: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < COMMA: "," >
| < SEMICOLON: ";" >
}

/*
 * Operators
 */
TOKEN:
{
  /*
   * Unary plus and minus count for as TERM_OP.
   */ 
  < NOT_OP: "!" >
| < DISJUNCTION_OP: "||" >
| < CONJUNCTION_OP: "&&" >
| < EQUALITY_OP: "==" | "!=" >
| < RELATION_OP: "<" | ">" | "<=" | ">=" >
| < FACTOR_OP: "*" | "/" | "%" >
| < TERM_OP: "+" | "-" >
}

/*
 * Assignment
 */
TOKEN:
{
  < ASSIGN: "=" >
  | < ASSIGN_SC: "=" | "+=" | "-=" >
}

/*
 * Literals
 */
TOKEN:
{
 < HEX_LITERAL: "0x" (<HEX_DIGIT>)+ >
| < DECIMAL_LITERAL: (["0"-"9"])+ >
| <#CHAR: (
      ["a"-"z", "A"-"Z", "_", "0"-"9"]
    | "\\t" | "\\n"
    | "\\\\" | "\\\"" | "\\'"
    | [
       "+", "-", "/", "*", "%",
       "!",  "?", "@", "#", "$", "%", "^", "&", "(", ")",
       "=", ":", ";", "~", " "
       ]
  ) >  
| <#ALPHA_NUM: <ALPHA> | ["0"-"9"] >
| <#ALPHA: ["a"-"z","A"-"Z","_"] >
| <#HEX_DIGIT: ["0"-"9", "a"-"f", "A"-"F"] >
| < BOOL_LITERAL: "true" | "false" >
| < CHAR_LITERAL: "'" <CHAR> "'" >
| < STRING_LITERAL: "\"" (<CHAR>)* "\"" >
}

/*
 * Identifier
 */
TOKEN:
{
  < IDENTIFIER: <ALPHA> (<ALPHA_NUM>)* >
}

// ------------ PARSER ------------

SimpleNode Program():
{/*@bgen(jjtree) Program */
  CuteProgram jjtn000 = new CuteProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Program */
  try {
/*@egen*/
  <CLASS>
  <PROGRAM>
  <LBRACE>
  (LOOKAHEAD(3) FieldDeclaration())*
  (MethodDeclaration())*
  <RBRACE>
  <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
  return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

UglyTriplet<String, Boolean, Integer> FieldDeclarationUnit():
{/*@bgen(jjtree) FieldDeclarationUnit */
  CuteFieldDeclarationUnit jjtn000 = new CuteFieldDeclarationUnit(JJTFIELDDECLARATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
  int size = 0;
  boolean b = false;
  CuteIntLiteral intLiteral;
  /*
   * It could've better just to traverse children instead of keeping a friggin redundant list
   * with a friggin' ugly triplet.
   */
}
{/*@bgen(jjtree) FieldDeclarationUnit */
  try {
/*@egen*/
  t = <IDENTIFIER> { jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn; }
  (
    <LBRACK>
    intLiteral = IntLiteral()
    {
      b = true;
      size = (Integer)intLiteral.value;
    }
    <RBRACK>
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.isArray = b;
    jjtn000.name = t.image;
    jjtn000.size = size;
    return new UglyTriplet<String, Boolean, Integer>(t.image, new Boolean(b), new Integer(size));
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FieldDeclaration():
{/*@bgen(jjtree) FieldDeclaration */
  CuteFieldDeclaration jjtn000 = new CuteFieldDeclaration(JJTFIELDDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  UglySymbolType type;
  UglyTriplet<String, Boolean, Integer> triplet;
  /*
   * It could've better just to traverse children instead of keeping a friggin redundant list.
   */
}
{/*@bgen(jjtree) FieldDeclaration */
  try {
/*@egen*/
  type = Type()
  {
    jjtn000.type = type;
  }
  triplet = FieldDeclarationUnit()
  {
    jjtn000.infos.add(triplet);
  }
  (
    <COMMA>
     triplet = FieldDeclarationUnit()
     {
       jjtn000.infos.add(triplet);
     }
  )*
   <SEMICOLON>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

UglyPair<UglySymbolType, String > MethodDeclarationParameter():
{/*@bgen(jjtree) MethodDeclarationParameter */
  CuteMethodDeclarationParameter jjtn000 = new CuteMethodDeclarationParameter(JJTMETHODDECLARATIONPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  UglySymbolType type;
  Token t;
}
{/*@bgen(jjtree) MethodDeclarationParameter */
  try {
/*@egen*/
  type = Type()
  t = <IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.type = type;
    jjtn000.name = t.image;
    return new UglyPair<UglySymbolType, String>(type, t.image);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MethodDeclaration():
{/*@bgen(jjtree) MethodDeclaration */
  CuteMethodDeclaration jjtn000 = new CuteMethodDeclaration(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  UglySymbolType type = UglySymbolType.VOID;
  UglySymbolType.Method methodType;
  UglyPair<UglySymbolType, String > param;
  Token t;
  CuteBlock block;
}
{/*@bgen(jjtree) MethodDeclaration */
  try {
/*@egen*/
  (type = Type() | <VOID>)
  t = <IDENTIFIER>
  {
    jjtn000.name = t.image;
    methodType = new UglySymbolType.Method(jjtn000.name, type);
  }
  <LPAREN>
  (
    param = MethodDeclarationParameter()
    {
      jjtn000.params.add(param);
      methodType.params.add(param.v);
    }
    (
      <COMMA>
      param = MethodDeclarationParameter()
      {
        jjtn000.params.add(param);
        methodType.params.add(param.v);
      }
    )*
  )?
  {
    jjtn000.type = methodType;
  }
  <RPAREN>
  block = Block()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    block.shouldPushScope = false;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

CuteBlock Block():
{/*@bgen(jjtree) Block */
  CuteBlock jjtn000 = new CuteBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Block */
  try {
/*@egen*/
  <LBRACE>
  (
    VariableDeclaration()
  )*
  (
    Statement()
  )*
  <RBRACE>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void VariableDeclaration():
{/*@bgen(jjtree) VariableDeclaration */
  CuteVariableDeclaration jjtn000 = new CuteVariableDeclaration(JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
  UglySymbolType type;
}
{/*@bgen(jjtree) VariableDeclaration */
  try {
/*@egen*/
  jjtn000.type = Type()
  t = <IDENTIFIER>
  {
    jjtn000.names.add(t.image);
  }
  (
    <COMMA>
    t = <IDENTIFIER>
    {
      jjtn000.names.add(t.image);
    }
  )*
  <SEMICOLON>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

UglySymbolType Type():
{/*@bgen(jjtree) Type */
  CuteType jjtn000 = new CuteType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Type */
  try {
/*@egen*/
  (
    <INT>
  {
    jjtn000.type = UglySymbolType.INTEGER;
  }
  | <BOOLEAN>
  {
    jjtn000.type = UglySymbolType.BOOLEAN;
  }
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000.type;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleNode IfStatement():
{/*@bgen(jjtree) IfStatement */
  CuteIfStatement jjtn000 = new CuteIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
  CuteBlock ifBlock;
  CuteBlock elseBlock;
}
{/*@bgen(jjtree) IfStatement */
  try {
/*@egen*/
  t = <IF> { jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn; }
  <LPAREN>
  Expression()
  <RPAREN>
  ifBlock = Block()
  {
    ifBlock.name = "if-block";
  }
  (
    t = <ELSE> { jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn; }
    elseBlock = Block()
    {
      elseBlock.name = "else-block";
    }
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleNode ForStatement():
{/*@bgen(jjtree) ForStatement */
  CuteForStatement jjtn000 = new CuteForStatement(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  /*
   * For-loop variables always evaluate to int.
   * They *can* shadow variables in the enclosing scope.
   */
  CuteBlock block;
  Token t;
  int initialValue; // TODO these could be strings as to let the visitor complain ?
  int finalValue;
  // TODO: get the value of the expression
}
{/*@bgen(jjtree) ForStatement */
  try {
/*@egen*/
  t = <FOR> { jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn; }
  t = <IDENTIFIER> { jjtn000.iName = t.image; }
  <ASSIGN>
  Expression()
  <COMMA>
  Expression()
  block = Block()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    block.name = "for-block";
    block.shouldPushScope = false;
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleNode ReturnStatement():
{/*@bgen(jjtree) ReturnStatement */
  CuteReturnStatement jjtn000 = new CuteReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) ReturnStatement */
  try {
/*@egen*/
  t =<RETURN> (LOOKAHEAD(2) Expression())?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.line = t.beginLine;
    jjtn000.column = t.beginColumn;
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleNode BreakStatement():
{/*@bgen(jjtree) BreakStatement */
  CuteBreakStatement jjtn000 = new CuteBreakStatement(JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) BreakStatement */
  try {
/*@egen*/
  t = <BREAK>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.line = t.beginLine;
    jjtn000.column = t.beginColumn;
    return jjtn000;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleNode ContinueStatement():
{/*@bgen(jjtree) ContinueStatement */
  CuteContinueStatement jjtn000 = new CuteContinueStatement(JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) ContinueStatement */
  try {
/*@egen*/
  t = <CONTINUE>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.line = t.beginLine;
    jjtn000.column = t.beginColumn;
    return jjtn000;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleNode Statement():
{/*@bgen(jjtree) Statement */
  CuteStatement jjtn000 = new CuteStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  SimpleNode node;
}
{/*@bgen(jjtree) Statement */
  try {
/*@egen*/
  (
    (
        LOOKAHEAD(3) node = Assignment()
      | LOOKAHEAD(3) node = MethodCall()
      | node = CalloutStatement()
      | node = ReturnStatement()
      | node = BreakStatement()
      | node = ContinueStatement()
    )
    <SEMICOLON>
    | node = IfStatement()
    | node = ForStatement()
    | node = Block()
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.line = node.line;
    jjtn000.column = node.column;
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

CuteAssignment Assignment():
{/*@bgen(jjtree) Assignment */
  CuteAssignment jjtn000 = new CuteAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Assignment */
  try {
/*@egen*/
  Location()
  (
    /* redundancy pffft */
      t = <ASSIGN_SC> { jjtn000.isShortcut = true; }
    | t = <ASSIGN>
  )
  Expression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.value = t.image;
    jjtn000.line = t.beginLine;
    jjtn000.column = t.beginColumn;
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

CuteLocation Location():
{/*@bgen(jjtree) Location */
  CuteLocation jjtn000 = new CuteLocation(JJTLOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Location */
  try {
/*@egen*/
  t = <IDENTIFIER>
  {
    jjtn000.name = t.image;
    jjtn000.line = t.beginLine;
    jjtn000.column = t.beginColumn;
  }
  (
    <LBRACK>
    Expression()
    <RBRACK>
    {
      jjtn000.isArrayAccess = true;
    }
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

CuteMethodCall MethodCall():
{/*@bgen(jjtree) MethodCall */
  CuteMethodCall jjtn000 = new CuteMethodCall(JJTMETHODCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  CuteMethodName methodName;
  Token t;
}
{/*@bgen(jjtree) MethodCall */
    try {
/*@egen*/
    methodName = MethodName()
    {
      jjtn000.name = methodName.name;
      jjtn000.line = methodName.line;
      jjtn000.column = methodName.column;
    }
    <LPAREN>
    (
      Expression()
      (
        <COMMA>
        Expression()
        )*
    )?
    <RPAREN>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

CuteCalloutStatement CalloutStatement():
{/*@bgen(jjtree) CalloutStatement */
  CuteCalloutStatement jjtn000 = new CuteCalloutStatement(JJTCALLOUTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String s;
  Token t;
}
{/*@bgen(jjtree) CalloutStatement */
  try {
/*@egen*/
  t = <CALLOUT>
  {
    jjtn000.line = t.beginLine;
    jjtn000.column = t.beginColumn;
  }
  <LPAREN>
  s = StringLiteral()
  {
    jjtn000.value= s;
  }
  (
    <COMMA>
    CalloutArgument()
  )*
  <RPAREN>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

CuteMethodName MethodName():
{/*@bgen(jjtree) MethodName */
        CuteMethodName jjtn000 = new CuteMethodName(JJTMETHODNAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) MethodName */
  try {
/*@egen*/
  t = <IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.name = t.image;
    jjtn000.line = t.beginLine;
    jjtn000.column = t.beginColumn;
    return jjtn000;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

CuteExpression Expression():
{/*@bgen(jjtree) Expression */
  CuteExpression jjtn000 = new CuteExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  CuteExpression e;
}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  e = DisjunctionExpression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.line = e.line;
    jjtn000.column = e.column;
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

CuteDisjunctionExpression DisjunctionExpression():
{/*@bgen(jjtree) DisjunctionExpression */
  CuteDisjunctionExpression jjtn000 = new CuteDisjunctionExpression(JJTDISJUNCTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  CuteExpression e;
  Token t;
}
{/*@bgen(jjtree) DisjunctionExpression */
  try {
/*@egen*/
  e = ConjunctionExpression()
  (
    t = <DISJUNCTION_OP>
    e = ConjunctionExpression()
    {
      e.operator = t.image;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.line = e.line;
    jjtn000.column = e.column;
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

CuteConjunctionExpression ConjunctionExpression():
{/*@bgen(jjtree) ConjunctionExpression */
  CuteConjunctionExpression jjtn000 = new CuteConjunctionExpression(JJTCONJUNCTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  CuteExpression e;
  Token t;
}
{/*@bgen(jjtree) ConjunctionExpression */
  try {
/*@egen*/
  e = EqualityExpression()
  (
    t = <CONJUNCTION_OP> 
    e = EqualityExpression()
    {
      e.operator = t.image;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.line = e.line;
    jjtn000.column = e.column;
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

CuteEqualityExpression EqualityExpression():
{/*@bgen(jjtree) EqualityExpression */
  CuteEqualityExpression jjtn000 = new CuteEqualityExpression(JJTEQUALITYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  CuteExpression e;
  Token t;
}
{/*@bgen(jjtree) EqualityExpression */
  try {
/*@egen*/
  e = RelationExpression()
  (
    t = <EQUALITY_OP>
    e = RelationExpression()
    {
      e.operator = t.image;
    }
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.line = e.line;
    jjtn000.column = e.column;
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

CuteRelationExpression RelationExpression():
{/*@bgen(jjtree) RelationExpression */
  CuteRelationExpression jjtn000 = new CuteRelationExpression(JJTRELATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  CuteExpression e;
  Token t;
}
{/*@bgen(jjtree) RelationExpression */
  try {
/*@egen*/
  e = TermExpression()
  (
    t = <RELATION_OP>
    e = TermExpression()
    {
      e.operator = t.image;
    }
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.line = e.line;
    jjtn000.column = e.column;
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

CuteTermExpression TermExpression():
{/*@bgen(jjtree) TermExpression */
 CuteTermExpression jjtn000 = new CuteTermExpression(JJTTERMEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 CuteExpression e;
 Token t;
}
{/*@bgen(jjtree) TermExpression */
  try {
/*@egen*/
  e = FactorExpression()
  (
    t = <TERM_OP>
    e = FactorExpression()
    {
      e.operator = t.image;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.line = e.line;
    jjtn000.column = e.column;
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

CuteFactorExpression FactorExpression():
{/*@bgen(jjtree) FactorExpression */
  CuteFactorExpression jjtn000 = new CuteFactorExpression(JJTFACTOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  CuteExpression e;
  Token t;
}
{/*@bgen(jjtree) FactorExpression */
  try {
/*@egen*/
  e = UnaryExpression()
  (
    t = <FACTOR_OP>
    e = UnaryExpression()
    {
      e.operator = t.image;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.line = e.line;
    jjtn000.column = e.column;
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

CuteUnaryExpression UnaryExpression():
{/*@bgen(jjtree) UnaryExpression */
  CuteUnaryExpression jjtn000 = new CuteUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  CuteExpression e;
  Token t = null;
}
{/*@bgen(jjtree) UnaryExpression */
  try {
/*@egen*/
  (
      t = <NOT_OP> { jjtn000.isArithmetic = false; }
    | t = <TERM_OP> { jjtn000.isArithmetic = true; }
  )?
  e = ExpressionUnit()
  {
    if (t == null) {
      jjtn000.line = e.line;
      jjtn000.column = e.column;
    } else {
      jjtn000.line = t.beginLine;
      jjtn000.column = t.beginColumn;
      e.operator = t.image;
    }
  }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

CuteExpressionUnit ExpressionUnit():
{/*@bgen(jjtree) ExpressionUnit */
  CuteExpressionUnit jjtn000 = new CuteExpressionUnit(JJTEXPRESSIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  SimpleNode node;
}
{/*@bgen(jjtree) ExpressionUnit */
  try {
/*@egen*/
  (
     LOOKAHEAD(3) node = MethodCall()
    | node = CalloutStatement()
    | node = Location()
    | node = Literal()
    | <LPAREN>
      node = Expression()
      <RPAREN>
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.line = node.line;
    jjtn000.column = node.column;
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CalloutArgument():
{/*@bgen(jjtree) CalloutArgument */
  CuteCalloutArgument jjtn000 = new CuteCalloutArgument(JJTCALLOUTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String s;
}
{/*@bgen(jjtree) CalloutArgument */
  try {
/*@egen*/
  Expression() | s = StringLiteral()/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ { jjtn000.value = s; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

CuteLiteral Literal():
{/*@bgen(jjtree) Literal */
  CuteLiteral jjtn000 = new CuteLiteral(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  CuteLiteral literal = null;
}
{/*@bgen(jjtree) Literal */
  try {
/*@egen*/
  (
    LOOKAHEAD(2) literal = IntLiteral()
    | literal = BooleanLiteral()
    | literal = CharLiteral()
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.line = literal.line;
    jjtn000.column = literal.column;
    jjtn000.value = literal.value;
    return literal;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

CuteCharLiteral CharLiteral():
{/*@bgen(jjtree) CharLiteral */
  CuteCharLiteral jjtn000 = new CuteCharLiteral(JJTCHARLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
  Character c = null;
}
{/*@bgen(jjtree) CharLiteral */
  try {
/*@egen*/
  t = <CHAR_LITERAL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    assert t.image.charAt(0) == '\'': t.image;
    assert t.image.charAt(t.image.length() -1) == '\'' : t.image;
    assert t.image.length() <= 4 : t.image;
    if (t.image.length() == 3) {
      c = t.image.charAt(1);
    } else if (t.image.length() == 2) {
      assert t.image.charAt(1) == '\\';
      switch (t.image.charAt(2)) {
        case 'n': c = '\n'; break;
        case 't': c = '\t'; break;
        case 'r': c = '\r'; break;
        default: c = '\0';
      }
    }
    // CAUTION
    jjtn000.value = new Integer(c);
    jjtn000.line = t.beginLine;
    jjtn000.column = t.beginColumn;
    return jjtn000;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

CuteIntLiteral IntLiteral():
{/*@bgen(jjtree) IntLiteral */
  CuteIntLiteral jjtn000 = new CuteIntLiteral(JJTINTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token signToken = null;
  Token numberToken;
  int isPositive = 1;
}
{/*@bgen(jjtree) IntLiteral */
  try {
/*@egen*/
  (
    signToken = <TERM_OP>
    {
      isPositive = signToken.equals("-") ? -1 : +1;
      jjtn000.line = signToken.beginLine;
      jjtn000.column = signToken.beginColumn;
    }
  )?
  (
      numberToken = <DECIMAL_LITERAL>
        {
          jjtn000.base = 10;
        }
    | numberToken = <HEX_LITERAL>
        {
          jjtn000.base = 16; 
        }
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    try {
      int number = Integer.decode(numberToken.image);
      number *= isPositive;
      jjtn000.value = new Integer(number);
    } catch (NumberFormatException e) {
      System.err.print("Bad syntactic construction for int literal: ");
      System.err.println(numberToken.image);
      jjtn000.value = new Integer(0);
    } finally {
      if (signToken == null) {
        jjtn000.line = numberToken.beginLine;
        jjtn000.column = numberToken.beginColumn;
      }
      return jjtn000;
    }
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/   
}

CuteBooleanLiteral BooleanLiteral():
{/*@bgen(jjtree) BooleanLiteral */
  CuteBooleanLiteral jjtn000 = new CuteBooleanLiteral(JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) BooleanLiteral */
  try {
/*@egen*/
  t = <BOOL_LITERAL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.value = Boolean.valueOf(t.image);
    jjtn000.line = t.beginLine;
    jjtn000.column = t.beginColumn;
    return jjtn000;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String StringLiteral():
{/*@bgen(jjtree) StringLiteral */
  CuteStringLiteral jjtn000 = new CuteStringLiteral(JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) StringLiteral */
  try {
/*@egen*/
  t = <STRING_LITERAL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    try {
      StringBuilder builder = new StringBuilder(t.image);
      builder.delete(0, 1);
      builder.delete(builder.length() - 1, builder.length());
      String string = builder.toString();
      jjtn000.value = string;
      return string;
    } catch (Exception e) {
      return "";
    }
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
