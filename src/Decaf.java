/* Generated By:JJTree&JavaCC: Do not edit this line. Decaf.java */
import java.io.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class Decaf/*@bgen(jjtree)*/implements DecafTreeConstants, DecafConstants {/*@bgen(jjtree)*/
  protected static JJTDecafState jjtree = new JJTDecafState();
  static UglySymbolTable currentScope = new UglySymbolTable("Global");

  public static void main(String args []) throws ParseException, IOException {
    Decaf parser = null;
    FileInputStream fis = null;
    if (args.length > 0) {
      fis = new FileInputStream(args[0]);
    } else {
      BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
      String line = reader.readLine();
      fis = new FileInputStream(line);
    }

    parser = new Decaf(fis);

    try {
      SimpleNode tree = Decaf.Program();
      tree.dump("> ");
      UglySymbolTableVisitor symbolTableVisitor = new UglySymbolTableVisitor();
      UglyTypeCheckVisitor typeCheckVisitor = new UglyTypeCheckVisitor();
      UglyTACVisitor tacVisitor = new UglyTACVisitor();
      tree.jjtAccept(symbolTableVisitor, currentScope);
      tree.jjtAccept(typeCheckVisitor, currentScope);
      if (UglySemanticError.hadErrors()) {
        System.out.println("Semantic errors.");
        return;
      }
      System.out.println("Yay!");
      tree.jjtAccept(tacVisitor, currentScope);
    } catch (Exception e) {
        System.out.println("Oops. Exception.");
        e.printStackTrace();
        System.out.println(e.getMessage());
        Decaf.ReInit(System.in);
      } catch (Error e) {
        System.out.println("Oops. Error.");
        System.out.println("*** error message ***");
        System.out.println(e.getMessage());
        System.out.println("*** error message ***");
        e.printStackTrace();
      }
  }

// ------------ PARSER ------------
  static final public SimpleNode Program() throws ParseException {
    trace_call("Program");
    try {
 /*@bgen(jjtree) Program */
  CuteProgram jjtn000 = new CuteProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(CLASS);
        jj_consume_token(PROGRAM);
        jj_consume_token(LBRACE);
        label_1:
        while (true) {
          if (jj_2_1(3)) {
            ;
          } else {
            break label_1;
          }
          FieldDeclaration();
        }
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case INT:
          case VOID:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_2;
          }
          MethodDeclaration();
        }
        jj_consume_token(RBRACE);
        jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Program");
    }
  }

  static final public UglyTriplet<String, Boolean, Integer> FieldDeclarationUnit() throws ParseException {
    trace_call("FieldDeclarationUnit");
    try {
 /*@bgen(jjtree) FieldDeclarationUnit */
  CuteFieldDeclarationUnit jjtn000 = new CuteFieldDeclarationUnit(JJTFIELDDECLARATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  int size = 0;
  boolean b = false;
  CuteIntLiteral intLiteral;
      try {
        t = jj_consume_token(IDENTIFIER);
                     jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACK:
          jj_consume_token(LBRACK);
          intLiteral = IntLiteral();
      b = true;
      size = (Integer)intLiteral.value;
          jj_consume_token(RBRACK);
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.isArray = b;
    jjtn000.name = t.image;
    jjtn000.size = size;
    {if (true) return new UglyTriplet<String, Boolean, Integer>(t.image, new Boolean(b), new Integer(size));}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("FieldDeclarationUnit");
    }
  }

  static final public void FieldDeclaration() throws ParseException {
    trace_call("FieldDeclaration");
    try {
 /*@bgen(jjtree) FieldDeclaration */
  CuteFieldDeclaration jjtn000 = new CuteFieldDeclaration(JJTFIELDDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);UglySymbolType type;
  UglyTriplet<String, Boolean, Integer> triplet;
      try {
        type = Type();
    jjtn000.type = type;
        triplet = FieldDeclarationUnit();
    jjtn000.infos.add(triplet);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMMA);
          triplet = FieldDeclarationUnit();
       jjtn000.infos.add(triplet);
        }
        jj_consume_token(SEMICOLON);
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("FieldDeclaration");
    }
  }

  static final public UglyPair<UglySymbolType, String > MethodDeclarationParameter() throws ParseException {
    trace_call("MethodDeclarationParameter");
    try {
 /*@bgen(jjtree) MethodDeclarationParameter */
  CuteMethodDeclarationParameter jjtn000 = new CuteMethodDeclarationParameter(JJTMETHODDECLARATIONPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);UglySymbolType type;
  Token t;
      try {
        type = Type();
        t = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.type = type;
    jjtn000.name = t.image;
    {if (true) return new UglyPair<UglySymbolType, String>(type, t.image);}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("MethodDeclarationParameter");
    }
  }

  static final public void MethodDeclaration() throws ParseException {
    trace_call("MethodDeclaration");
    try {
 /*@bgen(jjtree) MethodDeclaration */
  CuteMethodDeclaration jjtn000 = new CuteMethodDeclaration(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);UglySymbolType type = UglySymbolType.VOID;
  UglySymbolType.Method methodType;
  UglyPair<UglySymbolType, String > param;
  Token t;
  CuteBlock block;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case INT:
          type = Type();
          break;
        case VOID:
          jj_consume_token(VOID);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        t = jj_consume_token(IDENTIFIER);
    jjtn000.name = t.image;
    methodType = new UglySymbolType.Method(jjtn000.name, type);
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case INT:
          param = MethodDeclarationParameter();
      jjtn000.params.add(param);
      methodType.params.add(param.v);
          label_4:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[4] = jj_gen;
              break label_4;
            }
            jj_consume_token(COMMA);
            param = MethodDeclarationParameter();
        jjtn000.params.add(param);
        methodType.params.add(param.v);
          }
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
    jjtn000.type = methodType;
        jj_consume_token(RPAREN);
        block = Block();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    block.shouldPushScope = false;
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("MethodDeclaration");
    }
  }

  static final public CuteBlock Block() throws ParseException {
    trace_call("Block");
    try {
 /*@bgen(jjtree) Block */
  CuteBlock jjtn000 = new CuteBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(LBRACE);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case INT:
            ;
            break;
          default:
            jj_la1[6] = jj_gen;
            break label_5;
          }
          VariableDeclaration();
        }
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BREAK:
          case CALLOUT:
          case CONTINUE:
          case FOR:
          case IF:
          case RETURN:
          case LBRACE:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_6;
          }
          Statement();
        }
        jj_consume_token(RBRACE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Block");
    }
  }

  static final public void VariableDeclaration() throws ParseException {
    trace_call("VariableDeclaration");
    try {
 /*@bgen(jjtree) VariableDeclaration */
  CuteVariableDeclaration jjtn000 = new CuteVariableDeclaration(JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  UglySymbolType type;
      try {
        jjtn000.type = Type();
        t = jj_consume_token(IDENTIFIER);
    jjtn000.names.add(t.image);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_7;
          }
          jj_consume_token(COMMA);
          t = jj_consume_token(IDENTIFIER);
      jjtn000.names.add(t.image);
        }
        jj_consume_token(SEMICOLON);
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("VariableDeclaration");
    }
  }

  static final public UglySymbolType Type() throws ParseException {
    trace_call("Type");
    try {
 /*@bgen(jjtree) Type */
  CuteType jjtn000 = new CuteType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
          jj_consume_token(INT);
    jjtn000.type = UglySymbolType.INTEGER;
          break;
        case BOOLEAN:
          jj_consume_token(BOOLEAN);
    jjtn000.type = UglySymbolType.BOOLEAN;
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000.type;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Type");
    }
  }

  static final public SimpleNode IfStatement() throws ParseException {
    trace_call("IfStatement");
    try {
 /*@bgen(jjtree) IfStatement */
  CuteIfStatement jjtn000 = new CuteIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  CuteBlock ifBlock;
  CuteBlock elseBlock;
      try {
        t = jj_consume_token(IF);
             jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        ifBlock = Block();
    ifBlock.name = "if-block";
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          t = jj_consume_token(ELSE);
                 jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
          elseBlock = Block();
      elseBlock.name = "else-block";
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("IfStatement");
    }
  }

  static final public SimpleNode ForStatement() throws ParseException {
    trace_call("ForStatement");
    try {
 /*@bgen(jjtree) ForStatement */
  CuteForStatement jjtn000 = new CuteForStatement(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);/*
   * For-loop variables always evaluate to int.
   * They *can* shadow variables in the enclosing scope.
   */
  CuteBlock block;
  Token t;
  int initialValue; // TODO these could be strings as to let the visitor complain ?
  int finalValue;
      try {
        t = jj_consume_token(FOR);
              jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
        t = jj_consume_token(IDENTIFIER);
                     jjtn000.iName = t.image;
        jj_consume_token(ASSIGN);
        Expression();
        jj_consume_token(COMMA);
        Expression();
        block = Block();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    block.name = "for-block";
    block.shouldPushScope = false;
    {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ForStatement");
    }
  }

  static final public SimpleNode ReturnStatement() throws ParseException {
    trace_call("ReturnStatement");
    try {
 /*@bgen(jjtree) ReturnStatement */
  CuteReturnStatement jjtn000 = new CuteReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(RETURN);
        if (jj_2_2(2)) {
          Expression();
        } else {
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.line = t.beginLine;
    jjtn000.column = t.beginColumn;
    {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ReturnStatement");
    }
  }

  static final public SimpleNode BreakStatement() throws ParseException {
    trace_call("BreakStatement");
    try {
 /*@bgen(jjtree) BreakStatement */
  CuteBreakStatement jjtn000 = new CuteBreakStatement(JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(BREAK);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.line = t.beginLine;
    jjtn000.column = t.beginColumn;
    {if (true) return jjtn000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("BreakStatement");
    }
  }

  static final public SimpleNode ContinueStatement() throws ParseException {
    trace_call("ContinueStatement");
    try {
 /*@bgen(jjtree) ContinueStatement */
  CuteContinueStatement jjtn000 = new CuteContinueStatement(JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(CONTINUE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.line = t.beginLine;
    jjtn000.column = t.beginColumn;
    {if (true) return jjtn000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ContinueStatement");
    }
  }

  static final public SimpleNode Statement() throws ParseException {
    trace_call("Statement");
    try {
 /*@bgen(jjtree) Statement */
  CuteStatement jjtn000 = new CuteStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);SimpleNode node;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
        case CALLOUT:
        case CONTINUE:
        case RETURN:
        case IDENTIFIER:
          if (jj_2_3(3)) {
            node = Assignment();
          } else if (jj_2_4(3)) {
            node = MethodCall();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CALLOUT:
              node = CalloutStatement();
              break;
            case RETURN:
              node = ReturnStatement();
              break;
            case BREAK:
              node = BreakStatement();
              break;
            case CONTINUE:
              node = ContinueStatement();
              break;
            default:
              jj_la1[11] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          jj_consume_token(SEMICOLON);
          break;
        case IF:
          node = IfStatement();
          break;
        case FOR:
          node = ForStatement();
          break;
        case LBRACE:
          node = Block();
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.line = node.line;
    jjtn000.column = node.column;
    {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Statement");
    }
  }

  static final public CuteAssignment Assignment() throws ParseException {
    trace_call("Assignment");
    try {
 /*@bgen(jjtree) Assignment */
  CuteAssignment jjtn000 = new CuteAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        Location();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN_SC:
          /* redundancy pffft */
                t = jj_consume_token(ASSIGN_SC);
                        jjtn000.isShortcut = true;
          break;
        case ASSIGN:
          t = jj_consume_token(ASSIGN);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Expression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.value = t.image;
    jjtn000.line = t.beginLine;
    jjtn000.column = t.beginColumn;
    {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Assignment");
    }
  }

  static final public CuteLocation Location() throws ParseException {
    trace_call("Location");
    try {
 /*@bgen(jjtree) Location */
  CuteLocation jjtn000 = new CuteLocation(JJTLOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(IDENTIFIER);
    jjtn000.name = t.image;
    jjtn000.line = t.beginLine;
    jjtn000.column = t.beginColumn;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACK:
          jj_consume_token(LBRACK);
          Expression();
          jj_consume_token(RBRACK);
      jjtn000.isArrayAccess = true;
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Location");
    }
  }

  static final public CuteMethodCall MethodCall() throws ParseException {
    trace_call("MethodCall");
    try {
 /*@bgen(jjtree) MethodCall */
  CuteMethodCall jjtn000 = new CuteMethodCall(JJTMETHODCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);CuteMethodName methodName;
  Token t;
      try {
        methodName = MethodName();
      jjtn000.name = methodName.name;
      jjtn000.line = methodName.line;
      jjtn000.column = methodName.column;
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CALLOUT:
        case LPAREN:
        case NOT_OP:
        case TERM_OP:
        case HEX_LITERAL:
        case DECIMAL_LITERAL:
        case BOOL_LITERAL:
        case CHAR_LITERAL:
        case IDENTIFIER:
          Expression();
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[15] = jj_gen;
              break label_8;
            }
            jj_consume_token(COMMA);
            Expression();
          }
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("MethodCall");
    }
  }

  static final public CuteCalloutStatement CalloutStatement() throws ParseException {
    trace_call("CalloutStatement");
    try {
 /*@bgen(jjtree) CalloutStatement */
  CuteCalloutStatement jjtn000 = new CuteCalloutStatement(JJTCALLOUTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String s;
  Token t;
      try {
        t = jj_consume_token(CALLOUT);
    jjtn000.line = t.beginLine;
    jjtn000.column = t.beginColumn;
        jj_consume_token(LPAREN);
        s = StringLiteral();
    jjtn000.value= s;
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[17] = jj_gen;
            break label_9;
          }
          jj_consume_token(COMMA);
          CalloutArgument();
        }
        jj_consume_token(RPAREN);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("CalloutStatement");
    }
  }

  static final public CuteMethodName MethodName() throws ParseException {
    trace_call("MethodName");
    try {
 /*@bgen(jjtree) MethodName */
        CuteMethodName jjtn000 = new CuteMethodName(JJTMETHODNAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.name = t.image;
    jjtn000.line = t.beginLine;
    jjtn000.column = t.beginColumn;
    {if (true) return jjtn000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("MethodName");
    }
  }

  static final public CuteExpression Expression() throws ParseException {
    trace_call("Expression");
    try {
 /*@bgen(jjtree) Expression */
  CuteExpression jjtn000 = new CuteExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);CuteExpression e;
      try {
        e = DisjunctionExpression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.line = e.line;
    jjtn000.column = e.column;
    {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Expression");
    }
  }

  static final public CuteDisjunctionExpression DisjunctionExpression() throws ParseException {
    trace_call("DisjunctionExpression");
    try {
 /*@bgen(jjtree) DisjunctionExpression */
  CuteDisjunctionExpression jjtn000 = new CuteDisjunctionExpression(JJTDISJUNCTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);CuteExpression e;
  Token t;
      try {
        e = ConjunctionExpression();
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DISJUNCTION_OP:
            ;
            break;
          default:
            jj_la1[18] = jj_gen;
            break label_10;
          }
          t = jj_consume_token(DISJUNCTION_OP);
          e = ConjunctionExpression();
      e.operator = t.image;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.line = e.line;
    jjtn000.column = e.column;
    {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("DisjunctionExpression");
    }
  }

  static final public CuteConjunctionExpression ConjunctionExpression() throws ParseException {
    trace_call("ConjunctionExpression");
    try {
 /*@bgen(jjtree) ConjunctionExpression */
  CuteConjunctionExpression jjtn000 = new CuteConjunctionExpression(JJTCONJUNCTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);CuteExpression e;
  Token t;
      try {
        e = EqualityExpression();
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CONJUNCTION_OP:
            ;
            break;
          default:
            jj_la1[19] = jj_gen;
            break label_11;
          }
          t = jj_consume_token(CONJUNCTION_OP);
          e = EqualityExpression();
      e.operator = t.image;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.line = e.line;
    jjtn000.column = e.column;
    {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ConjunctionExpression");
    }
  }

  static final public CuteEqualityExpression EqualityExpression() throws ParseException {
    trace_call("EqualityExpression");
    try {
 /*@bgen(jjtree) EqualityExpression */
  CuteEqualityExpression jjtn000 = new CuteEqualityExpression(JJTEQUALITYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);CuteExpression e;
  Token t;
      try {
        e = RelationExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUALITY_OP:
          t = jj_consume_token(EQUALITY_OP);
          e = RelationExpression();
      e.operator = t.image;
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.line = e.line;
    jjtn000.column = e.column;
    {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("EqualityExpression");
    }
  }

  static final public CuteRelationExpression RelationExpression() throws ParseException {
    trace_call("RelationExpression");
    try {
 /*@bgen(jjtree) RelationExpression */
  CuteRelationExpression jjtn000 = new CuteRelationExpression(JJTRELATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);CuteExpression e;
  Token t;
      try {
        e = TermExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RELATION_OP:
          t = jj_consume_token(RELATION_OP);
          e = TermExpression();
      e.operator = t.image;
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.line = e.line;
    jjtn000.column = e.column;
    {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("RelationExpression");
    }
  }

  static final public CuteTermExpression TermExpression() throws ParseException {
    trace_call("TermExpression");
    try {
 /*@bgen(jjtree) TermExpression */
 CuteTermExpression jjtn000 = new CuteTermExpression(JJTTERMEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);CuteExpression e;
 Token t;
      try {
        e = FactorExpression();
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TERM_OP:
            ;
            break;
          default:
            jj_la1[22] = jj_gen;
            break label_12;
          }
          t = jj_consume_token(TERM_OP);
          e = FactorExpression();
      e.operator = t.image;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.line = e.line;
    jjtn000.column = e.column;
    {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("TermExpression");
    }
  }

  static final public CuteFactorExpression FactorExpression() throws ParseException {
    trace_call("FactorExpression");
    try {
 /*@bgen(jjtree) FactorExpression */
  CuteFactorExpression jjtn000 = new CuteFactorExpression(JJTFACTOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);CuteExpression e;
  Token t;
      try {
        e = UnaryExpression();
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FACTOR_OP:
            ;
            break;
          default:
            jj_la1[23] = jj_gen;
            break label_13;
          }
          t = jj_consume_token(FACTOR_OP);
          e = UnaryExpression();
      e.operator = t.image;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.line = e.line;
    jjtn000.column = e.column;
    {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("FactorExpression");
    }
  }

  static final public CuteUnaryExpression UnaryExpression() throws ParseException {
    trace_call("UnaryExpression");
    try {
 /*@bgen(jjtree) UnaryExpression */
  CuteUnaryExpression jjtn000 = new CuteUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);CuteExpression e;
  Token t = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT_OP:
        case TERM_OP:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NOT_OP:
            t = jj_consume_token(NOT_OP);
                     jjtn000.isArithmetic = false;
            break;
          case TERM_OP:
            t = jj_consume_token(TERM_OP);
                      jjtn000.isArithmetic = true;
            break;
          default:
            jj_la1[24] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        e = ExpressionUnit();
    if (t == null) {
      jjtn000.line = e.line;
      jjtn000.column = e.column;
    } else {
      jjtn000.line = t.beginLine;
      jjtn000.column = t.beginColumn;
      e.operator = t.image;
    }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("UnaryExpression");
    }
  }

  static final public CuteExpressionUnit ExpressionUnit() throws ParseException {
    trace_call("ExpressionUnit");
    try {
 /*@bgen(jjtree) ExpressionUnit */
  CuteExpressionUnit jjtn000 = new CuteExpressionUnit(JJTEXPRESSIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);SimpleNode node;
      try {
        if (jj_2_5(3)) {
          node = MethodCall();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CALLOUT:
            node = CalloutStatement();
            break;
          case IDENTIFIER:
            node = Location();
            break;
          case TERM_OP:
          case HEX_LITERAL:
          case DECIMAL_LITERAL:
          case BOOL_LITERAL:
          case CHAR_LITERAL:
            node = Literal();
            break;
          case LPAREN:
            jj_consume_token(LPAREN);
            node = Expression();
            jj_consume_token(RPAREN);
            break;
          default:
            jj_la1[26] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.line = node.line;
    jjtn000.column = node.column;
    {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ExpressionUnit");
    }
  }

  static final public void CalloutArgument() throws ParseException {
    trace_call("CalloutArgument");
    try {
 /*@bgen(jjtree) CalloutArgument */
  CuteCalloutArgument jjtn000 = new CuteCalloutArgument(JJTCALLOUTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String s;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CALLOUT:
        case LPAREN:
        case NOT_OP:
        case TERM_OP:
        case HEX_LITERAL:
        case DECIMAL_LITERAL:
        case BOOL_LITERAL:
        case CHAR_LITERAL:
        case IDENTIFIER:
          Expression();
          break;
        case STRING_LITERAL:
          s = StringLiteral();
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                       jjtn000.value = s;
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("CalloutArgument");
    }
  }

  static final public CuteLiteral Literal() throws ParseException {
    trace_call("Literal");
    try {
 /*@bgen(jjtree) Literal */
  CuteLiteral jjtn000 = new CuteLiteral(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);CuteLiteral literal = null;
      try {
        if (jj_2_6(2)) {
          literal = IntLiteral();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOL_LITERAL:
            literal = BooleanLiteral();
            break;
          case CHAR_LITERAL:
            literal = CharLiteral();
            break;
          default:
            jj_la1[28] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.line = literal.line;
    jjtn000.column = literal.column;
    jjtn000.value = literal.value;
    {if (true) return literal;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Literal");
    }
  }

  static final public CuteCharLiteral CharLiteral() throws ParseException {
    trace_call("CharLiteral");
    try {
 /*@bgen(jjtree) CharLiteral */
  CuteCharLiteral jjtn000 = new CuteCharLiteral(JJTCHARLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  Character c = null;
      try {
        t = jj_consume_token(CHAR_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    assert t.image.charAt(0) == '\u005c'': t.image;
    assert t.image.charAt(t.image.length() -1) == '\u005c'' : t.image;
    assert t.image.length() <= 4 : t.image;
    if (t.image.length() == 3) {
      c = t.image.charAt(1);
    } else if (t.image.length() == 2) {
      assert t.image.charAt(1) == '\u005c\u005c';
      switch (t.image.charAt(2)) {
        case 'n': c = '\u005cn'; break;
        case 't': c = '\u005ct'; break;
        case 'r': c = '\u005cr'; break;
        default: c = '\u005c0';
      }
    }
    // CAUTION
    jjtn000.value = new Integer(c);
    jjtn000.line = t.beginLine;
    jjtn000.column = t.beginColumn;
    {if (true) return jjtn000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("CharLiteral");
    }
  }

  static final public CuteIntLiteral IntLiteral() throws ParseException {
    trace_call("IntLiteral");
    try {
 /*@bgen(jjtree) IntLiteral */
  CuteIntLiteral jjtn000 = new CuteIntLiteral(JJTINTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token signToken = null;
  Token numberToken;
  int isPositive = 1;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TERM_OP:
          signToken = jj_consume_token(TERM_OP);
      isPositive = signToken.equals("-") ? -1 : +1;
      jjtn000.line = signToken.beginLine;
      jjtn000.column = signToken.beginColumn;
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DECIMAL_LITERAL:
          numberToken = jj_consume_token(DECIMAL_LITERAL);
          jjtn000.base = 10;
          break;
        case HEX_LITERAL:
          numberToken = jj_consume_token(HEX_LITERAL);
          jjtn000.base = 16;
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    try {
      int number = Integer.decode(numberToken.image);
      number *= isPositive;
      jjtn000.value = new Integer(number);
    } catch (NumberFormatException e) {
      System.err.print("Bad syntactic construction for int literal: ");
      System.err.println(numberToken.image);
      jjtn000.value = new Integer(0);
    } finally {
      if (signToken == null) {
        jjtn000.line = numberToken.beginLine;
        jjtn000.column = numberToken.beginColumn;
      }
      {if (true) return jjtn000;}
    }
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("IntLiteral");
    }
  }

  static final public CuteBooleanLiteral BooleanLiteral() throws ParseException {
    trace_call("BooleanLiteral");
    try {
 /*@bgen(jjtree) BooleanLiteral */
  CuteBooleanLiteral jjtn000 = new CuteBooleanLiteral(JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(BOOL_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.value = Boolean.valueOf(t.image);
    jjtn000.line = t.beginLine;
    jjtn000.column = t.beginColumn;
    {if (true) return jjtn000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("BooleanLiteral");
    }
  }

  static final public String StringLiteral() throws ParseException {
    trace_call("StringLiteral");
    try {
 /*@bgen(jjtree) StringLiteral */
  CuteStringLiteral jjtn000 = new CuteStringLiteral(JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(STRING_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    try {
      StringBuilder builder = new StringBuilder(t.image);
      builder.delete(0, 1);
      builder.delete(builder.length() - 1, builder.length());
      String string = builder.toString();
      jjtn000.value = string;
      {if (true) return string;}
    } catch (Exception e) {
      {if (true) return "";}
    }
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("StringLiteral");
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(CONJUNCTION_OP)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(FACTOR_OP)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(CHAR_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(DISJUNCTION_OP)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_19()) return true;
    if (jj_3R_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_21()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_33()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_34()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(TERM_OP)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(BOOL_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(ASSIGN_SC)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(LBRACK)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(RELATION_OP)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(HEX_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(EQUALITY_OP)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(TERM_OP)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(CALLOUT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_38()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(TERM_OP)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(NOT_OP)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  static private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public DecafTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x88080,0x800000,0x8000000,0x88080,0x8000000,0x8080,0x8080,0x2026b00,0x8000000,0x8080,0x1000,0x20b00,0x2026b00,0x0,0x800000,0x8000000,0x20200200,0x8000000,0x40000000,0x80000000,0x0,0x0,0x0,0x0,0x20000000,0x20000000,0x200200,0x20200200,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x8000,0x30,0x0,0x0,0xb0c8,0x0,0x0,0x0,0x1,0x2,0x8,0x4,0x8,0x8,0xb0c8,0xf0c8,0x3000,0x8,0xc0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Decaf(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Decaf(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DecafTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Decaf(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DecafTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Decaf(DecafTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(DecafTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
