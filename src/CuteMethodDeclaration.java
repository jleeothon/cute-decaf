import java.util.List;
import java.util.ArrayList;

/* Generated By:JJTree: Do not edit this line. CuteMethodDeclaration.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=Cute,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class CuteMethodDeclaration extends SimpleNode {
	
  String name;
  /**
    * Wouldn't need a friggin' list if we traversed the children. Duh. Thanks. 
    */
  List<UglyPair<UglySymbolType, String>> params;
  UglySymbolType type;
  UglyLabel label;

	
  public CuteMethodDeclaration(int id) {
    super(id);
    params = new ArrayList<UglyPair<UglySymbolType,String>>();
  }

  public CuteMethodDeclaration(Decaf p, int id) {
    super(p, id);
    params = new ArrayList<UglyPair<UglySymbolType,String>>();
  }


  /** Accept the visitor. **/
  public Object jjtAccept(DecafVisitor visitor, UglySymbolTable data) {
    return visitor.visit(this, data);
  }
  
  @Override
  public String toString() {
	  StringBuilder builder = new StringBuilder(String.format(
			  "%s: %s(",
			  super.toString(),
			  this.name)
			  );
	  for (UglyPair<UglySymbolType, String> param : params) {
		  builder.append(String.format("%s %s, ", param.v, param.w));
	  }
    builder.substring(builder.length() - 2, builder.length());
	  builder.append(")");
	  return builder.toString();
	  
  }
  
}
/* JavaCC - OriginalChecksum=684a7adadd68ca7c10b51f6ba8b937fa (do not edit this line) */
